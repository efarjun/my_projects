#!/usr/bin/python3

# This script creates a snapshot of the unencrypted EBS volume, copies the snapshot to an encrypted snapshot, creates an encrypted EBS volume,
# stops the EC2 instance, detaches the unencrypted volume from the EC2 instance, attaches the encrypted volume to the EC2 instance, and stsrts the instance.

# It does not run any verifications nor reverses resource changes if mistakes are made. Use at your own risk and manually fix any issues.


#!/usr/bin/python3

import boto3
import time
import os

awsRegion = os.environ['AWS_DEFAULT_REGION']
ec2Client = boto3.client('ec2', region_name=awsRegion)
ssmClient = boto3.client('ssm')
stsClient = boto3.client('sts')
currentAccountId = stsClient.get_caller_identity()['Account']

print('Please confirm the EC2 instance is in a running state before continuing.')

unencryptedVolumeId = input('Please enter volume ID: ')

volumeDescription = ec2Client.describe_volumes(
        Filters=[
            {
                'Name': 'status',
                'Values': [
                    'in-use',
                    'available'
                    ]
                },
            ],
       VolumeIds=[
                   unencryptedVolumeId,
                ],
       )

for info in volumeDescription['Volumes']:
    for instanceId in info['Attachments']:
        InstanceId = instanceId['InstanceId']
        print(f'EC2 Instance ID: {InstanceId}')

instanceDescription = ec2Client.describe_instances(
        Filters=[
            {
                'Name': 'instance-state-name',
                'Values': [
                    'running'
                    ]
                },
            ],
       InstanceIds=[
                   InstanceId,
                ],
       )

for instance in instanceDescription['Reservations']:
    for state in instance['Instances']:
        instanceState = state['State']['Name']

if instanceState == 'running':

    for info in volumeDescription['Volumes']:
        az = info['AvailabilityZone']
        print(f'Availability Zone: {az}')

    for info in volumeDescription['Volumes']:
        for deviceName in info['Attachments']:
            deviceName = deviceName['Device']
            print(f'Device Name: {deviceName}')

    for info in volumeDescription['Volumes']:
        volumeType = info['VolumeType']
        print(f'Volume Type: {volumeType}')

    print('Job started ..')

    snapshot = ec2Client.create_snapshot(VolumeId=unencryptedVolumeId)

    snapshotId = snapshot['SnapshotId']

    snapshotWaiter = ec2Client.get_waiter('snapshot_completed')

    try:
        snapshotWaiter.wait(
            SnapshotIds=[
                snapshotId
            ],
            WaiterConfig={"Delay": 240}
        )

    except botocore.exceptions.WaiterError as e:
        if "Max attempts exceeded" in e.message:
            print('Snapshot did not complete in 600 seconds.')
        else:
            print(e.message)

    print(f'Initial snapshot {snapshotId} Created ..')

    snapshotCopy = ec2Client.copy_snapshot(
        Description='Snapshot copied from' + snapshotId,
        DestinationRegion=awsRegion,
        Encrypted=True,
        SourceRegion=awsRegion,
        SourceSnapshotId=snapshotId
        )

    snapshotCopyId = snapshotCopy['SnapshotId']

    try:
        snapshotWaiter.wait(
            SnapshotIds=[
                snapshotCopyId
            ],
        WaiterConfig={"Delay": 240}
        )

    except botocore.exceptions.WaiterError as e:
        if "Max attempts exceeded" in e.message:
            print('Snapshot did not complete in 600 seconds.')
        else:
            print(e.message)

    print(f'Encrypted Snapshot {snapshotCopyId} Created ..')

    encryptedVolume = ec2Client.create_volume(
        Encrypted=True,
        AvailabilityZone=az,
        SnapshotId=snapshotCopyId,
        VolumeType=volumeType,
        TagSpecifications=[
            {
                'ResourceType': 'volume',
                'Tags': [
                    {
                        'Key': 'Name',
                        'Value': 'Encrypted Volume'
                    },
                ]
            },
        ]
    )
    encryptedVolumeId = encryptedVolume['VolumeId']

    encryptedVolumeWaiter = ec2Client.get_waiter('volume_available')

    try:
        encryptedVolumeWaiter.wait(
            VolumeIds=[
                encryptedVolumeId
            ],
        )

    except botocore.exceptions.WaiterError as e:
        if "Max attempts exceeded" in e.message:
            print('Encrypted volume did not complete in 600 seconds.')
        else:
            print(e.message)

    volumeDescribe = ec2Client.describe_volumes(
            VolumeIds=[
                unencryptedVolumeId
                ])

    ec2Client.stop_instances(
        InstanceIds=[
            InstanceId
            ],
    )

    instanceWaiter = ec2Client.get_waiter('instance_stopped')

    try:
        instanceWaiter.wait(
            InstanceIds=[
                InstanceId
            ],
        )

    except botocore.exceptions.WaiterError as e:
        if "Max attempts exceeded" in e.message:
            print('Instance did not stop in 600 seconds.')
        else:
            print(e.message)
    print(f'Instance {InstanceId} stopped ..')

    detachedVolume = ec2Client.detach_volume(
        InstanceId=InstanceId,
        VolumeId=unencryptedVolumeId,
    )

    volumeWaiter = ec2Client.get_waiter('volume_available')

    try:
        volumeWaiter.wait(
            VolumeIds=[
                unencryptedVolumeId
            ],
        )

    except botocore.exceptions.WaiterError as e:
        if "Max attempts exceeded" in e.message:
            print('Encrypted volume did not complete in 600 seconds.')
        else:
            print(e.message)

    print(f'Unencrypted volume {unencryptedVolumeId} detached ..')

    attachedVolume = ec2Client.attach_volume(
        Device=deviceName,
        InstanceId=InstanceId,
        VolumeId=encryptedVolumeId,
    )

    volumeWaiter2 = ec2Client.get_waiter('volume_in_use')

    try:
        volumeWaiter2.wait(
            VolumeIds=[
                encryptedVolumeId
            ],
        )

    except botocore.exceptions.WaiterError as e:
        if "Max attempts exceeded" in e.message:
            print('Volume did not attach in 600 seconds.')
        else:
            print(e.message)

    print(f'Encrypted volume {encryptedVolumeId} attached ..')

    ec2Client.start_instances(
        InstanceIds=[
            InstanceId
            ],
    )

    instanceWaiter2 = ec2Client.get_waiter('instance_running')

    try:
        instanceWaiter2.wait(
            InstanceIds=[
                InstanceId
            ],
        )

    except botocore.exceptions.WaiterError as e:
        if "Max attempts exceeded" in e.message:
            print('Instance did not stop in 600 seconds.')
        else:
            print(e.message)

    print(f'Instance {InstanceId} started ..')

    print('Job completed.')

else:
    print('EC2 instance must be in a running state. Please ensure the instance is in a running state and try again.')
